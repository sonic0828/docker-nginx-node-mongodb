version: "3"

networks:            # 自定义网络
  my-network:            # 网络名字
    driver: bridge      # 由网关驱动

volumes:                # 创建自定义卷
    node_modules:       # 卷名
    mongo_data:

services:               # 定义每个服务的容器

### nginx #################
  nginx:                # nginx 容器 这里的名字可以当做变量使用
    build:              # 定义需要构建的内容
      context: ./nginx  # 选取 nginx 文件夹
    ports:              # 映射端口
      -  80:80
      -  443:443
    volumes:            # 挂载文件夹，配置我们可以写在宿主机，然后挂载进去
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/cert:/etc/nginx/cret
      - ./logs/nginx:/var/log/nginx
    restart: always     # 服务挂了的时候始终自动重启
    depends_on:         # 定义容器启动顺序 附带容器间的依赖关系
      - nodejs
    networks:           # 使用我们上面定义的网络
      - my-network

### node ##############
  nodejs:  
    build:      
      context: ./node   # 构建 node 目录 他会去 node 下面寻找 Dockerfile
    ports:
      - 127.0.0.1:80:3030    # 映射 3030
    volumes:
      - ./node/koa2-demo:/app/koa2-demo    # 项目文件映射
      - node_modules:/app/koa2-demo/node_modules    # 单独处理 node_modules
    restart: always
    depends_on:
      - mongo
    networks:
      - my-network

### mongoDB ########################
  mongo: 
    build:   
      context: ./mongodb
    ports:
      - 127.0.0.1:27017:27017
    volumes:
      - mongo_data:/data/db    # 这里的 mongo_data 用的是上面的自定卷
    restart: always
    networks:
      - my-network
